from Crypto.Util.number import *
n = 1338525507684653402999778081533425759003252817869677818195667017314806242416358205642298839026970595496342119858300946026391990703193141017294520929169188215972376242088086369807606670624803790401737591108282315750096324255793084160922677221751957212712803517118436833218624245205923242248108628611321037156645898586821085220242627490612023349053382443755835396060380148356396843587485836062675292429473399416220773119264170875344572106503527765883787085709475173
e = 65537
enc = 1223472562261607922873230168906599876544121184908787560719507356089663566193954408274177952469425701754830075417056095785169231271817618402723410904433195114685511232319745831398629526587965346487895374089156283178123198602502459425781046388749577059045228382825933830530615825134713892133858234564126534565173287995884031286890559024061897191162488874001478359342164646603432730817453647844052477977683984037594769058436272377688884074450042096890887748373484575
n1 = 142211732770812869122272362754309304444242844090724856862674116751932267592847366529614402332921088408084621438524420552942055104228988763927195282133111246594131662636241117725781605879422228235453250786330396879706682503051215968724761579068267745777979621552154094807129979263776755799626881115039666879933
a = 122878203576391015498887321676640027886240352207306148670665142415461874962570862821705599347753383774303960496467592276022702071114523703059339293483159070589167117532525348698167128786581285967744688545195452893723322074187884440667327715392247375509191317389380986191674591129880403057182577999223323722618
n2 = 154846403065154170271160924800685769390367851046664379685328719116107615382292938560626329729626671908441816267378408717761447980319039026516864991761714002677674766042894162719335881238209892017255059216473806877390249442308331182572664362191264226027880648108267313624532989351854678698836578189213587112901
b = 135369294233296974467447653831547101456584598072106616036493801342590344001720330011201394211307857830345428898883322071321223851584103134933822504191546536159672394463110691385938789947025699942388344036268466126779997542793058990155713301780680530185854462386647983744074103163240064437501817198218076249309
p=n//n1
s=GCD(pow(a,e,n1)-1,n2)
print(isPrime(s))
t=n2//s
print(isPrime(t))
phi2=(s-1)*(t-1)
d2=inverse(e,phi2)
r=pow(b,d2,n2)-7
print(isPrime(r))
q=n1//r
print(isPrime(q))
p=n//(q*r)
print(isPrime(p))
phi=(p-1)*(q-1)*(r-1)
d=inverse(e,phi)
msg=pow(enc,d,n)
print(long_to_bytes(msg).decode())
#nite{euler_totient_and_multi_prime}
