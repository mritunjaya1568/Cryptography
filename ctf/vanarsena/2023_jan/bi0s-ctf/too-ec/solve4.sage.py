

# This file was *autogenerated* from the file solve4.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xb4a8f1786f16b0ad10a2b5c4fdb020a192e963cf61eb3adb6eb55c41c41430a7313c158164b717516ae1f11e8f7b2df85b0d1843a519fd016894623384781eeed8e75f9bd38608d3fa734190ccde2b454e7de484b1600872b4fad839265656067b003c3f33c77345e8f55aa33234ac1b1e4d83d2f487ea1a042d4bdea3748bd3 = Integer(0xb4a8f1786f16b0ad10a2b5c4fdb020a192e963cf61eb3adb6eb55c41c41430a7313c158164b717516ae1f11e8f7b2df85b0d1843a519fd016894623384781eeed8e75f9bd38608d3fa734190ccde2b454e7de484b1600872b4fad839265656067b003c3f33c77345e8f55aa33234ac1b1e4d83d2f487ea1a042d4bdea3748bd3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_256 = Integer(256); _sage_const_15 = Integer(15); _sage_const_0 = Integer(0); _sage_const_25 = Integer(25); _sage_const_40 = Integer(40); _sage_const_16 = Integer(16); _sage_const_0p5 = RealNumber('0.5')
from sage.all import *

output = _sage_const_0xb4a8f1786f16b0ad10a2b5c4fdb020a192e963cf61eb3adb6eb55c41c41430a7313c158164b717516ae1f11e8f7b2df85b0d1843a519fd016894623384781eeed8e75f9bd38608d3fa734190ccde2b454e7de484b1600872b4fad839265656067b003c3f33c77345e8f55aa33234ac1b1e4d83d2f487ea1a042d4bdea3748bd3 

low = [_sage_const_1 ,_sage_const_2 ]

P = PolynomialRing(Zmod(output), implementation='NTL', names=('x',)); (x,) = P._first_ngens(1)
bound = _sage_const_256 **_sage_const_15 
f = low[_sage_const_0 ] + _sage_const_256 **_sage_const_25  * x + _sage_const_256 **_sage_const_40  * int('e078e75b3313660ec08eefcdfe98ca82ecea4f3483ce9055',_sage_const_16 )
print(f.monic().small_roots(X = bound, beta = _sage_const_0p5 )) 

