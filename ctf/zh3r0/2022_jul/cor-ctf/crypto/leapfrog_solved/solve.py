'''In [30]: sample(range(3, 25), 12)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-30-96e620954ee7> in <module>
----> 1 sample(range(3, 25), 12)

NameError: name 'sample' is not defined

In [31]: from random import sample

In [32]: sample(range(3, 25), 12)
Out[32]: [13, 23, 11, 12, 18, 24, 3, 8, 7, 6, 16, 19]

In [33]: lest1 = [5, 3, 23, 13, 24, 6, 10, 9, 7, 4, 19, 16]

In [34]: lest2 = [26242498579536691811055981149948736081413123636643477706015419836101346754443, 3032041275524117714109956576526514707563206018380
    ...: 1443609889236855980299685595, 65684356693401962957802832810273549345608027337432965824937963429120291339333, 1502554776554933316895736814
    ...: 9177848577882555487889680742466312084547650972663, 46764069432060214735440855620792051531943268335710103593983788232446614161424, 7157554
    ...: 4531523096893697176151110271985899529970263634996534766185719951232899, 81495475481985036684157025076217549730889942788808748136064587936
    ...: 07866713778, 12081871161483608517505346339140143493132928051760353815508503241747142024697, 656270569320062416747633563390684291882781234
    ...: 34638526706264676467885955099667, 23413741607307309476964696379608864503970503243566103692132654387385869400762, 560144082989827440928736
    ...: 49879675961526790332954773022900206888891912862484806, 77000766146189604405769394813422399327596415228762086351262010618717119973525, 145
    ...: 89246063765426640159853561271509992635998018136452450026806673980229327448]

In [35]: len(lest1)
Out[35]: 12

In [36]: len(lest2)
Out[36]: 13

In [37]: getPrime(256)
Out[37]: 65467045918251066222721701218288374576867358474515438176497744922699326763343

In [38]: n = 7496381567109847730974188479698336533402877999128485797049973947027880615836142125276127284985247374819508332144635326199087725765364
    ...: 44622740433312321551225804798615070968570924360513433926565743493982188041765073251393080701915713149058352288124261769783460352534266525
    ...: 14427577602497883320222308114564183147285901620088057911077966456234284726810656208008174785573268823859124785177124584400431679180204480
    ...: 6423061524946743483647067356497063397123482894327135033

In [39]: n
Out[39]: 749638156710984773097418847969833653340287799912848579704997394702788061583614212527612728498524737481950833214463532619908772576536444622740433312321551225804798615070968570924360513433926565743493982188041765073251393080701915713149058352288124261769783460352534266525144275776024978833202223081145641831472859016200880579110779664562342847268106562080081747855732688238591247851771245844004316791802044806423061524946743483647067356497063397123482894327135033

In [40]: msg = 63505798284080193788281915312317153045283942906889783120529602596578748314862100502065749708495972632596848061160338257600064663204
    ...: 32449756071969295238965453219485400579809176870494471536035357289709399988895842077091391476346250027585399422516080911752058275257802186
    ...: 3912216125429238650747457065675932447142457225733198994574859406385005172084564553350028705576471115060095822658169483595606826742801442

In [41]: msg % n
Out[41]: 63505798284080193788281915312317153045283942906889783120529602596578748314862100502065749708495972632596848061160338257600064663204324497560719692952389654532194854005798091768704944715360353572897093999888958420770913914763462500275853994225160809117520582752578021863912216125429238650747457065675932447142457225733198994574859406385005172084564553350028705576471115060095822658169483595606826742801442

In [42]: long_to_bytes(msg)
Out[42]: b'*V\xbf\x9b\x8e\xe0\xf6"#k-\xc1\xe4*\x92\xbf\xb3,?u1\x89\xb3%")J{\xdd\x12W[/\x15\xef\xcd\xf1m\xb8\xa5\xc8\xa8X\xc7]\x82/\x1c\xaeCp\xe8\xc41\x85\xd9\x9e6:.\x9a\x99\xff\xe1\xf22Kl\x8a" P\xc61\x1a\x16\x9d\xe5udN\x95\xeb\x1f\xb5\xd8\x1b\xc0d>\xc2\xed\xb6\x13\x06l\xe1\xcb$jw\x12J\xbd\xd8\xb0\r\x16%]\xb3S\x05\xa3hcp\xe9\xca\xabk5Q\x9d\x0e\xb4\x1e\x17\x82`\xc9og\xdf\xe6\x0b\xdf\xb5\xe7\xd9\x1fO>=\xef\x97w\x12\x17\x9cb\xbc\x08)f(\xa6\xcc\x83\x17B\xae\xca$!\x19d"'

In [43]: 

In [43]: lest1 = [5, 3, 23, 13, 24, 6, 10, 9, 7, 4, 19, 16]

In [44]: lest = []

In [45]: for i in range(len(lest1)):
    ...:     if i == 0:
    ...:         lest.append(lest1[i])
    ...:     else:
    ...:         lest.append(lest1[i] + lest1[i-1])
    ...: 

In [46]: lest
Out[46]: [5, 8, 26, 36, 37, 30, 16, 19, 16, 11, 23, 35]

In [47]: lest = []

In [48]: for i in range(len(lest1)):
    ...:     if i == 0:
    ...:         lest.append(lest1[i])
    ...:     else:
    ...:         lest.append(lest1[i] + lest[i-1])
    ...: 
    ...: 

In [49]: lest
Out[49]: [5, 8, 31, 44, 68, 74, 84, 93, 100, 104, 123, 139]

In [50]: from itertools import combinations

In [51]: for a,b,c,d in combinations(lest,r=4):
    ...:     if b-a == d-c:
    ...:         print(a,b,c,d)
    ...: 
5 31 74 100
5 44 84 123
5 44 100 139
8 31 100 123
8 44 68 104
44 74 93 123
68 84 123 139
74 93 104 123
84 100 123 139

In [52]: for a,b,c,d in combinations(lest,r=4):
    ...:     if b-a == d-c:
    ...:         print(a,b,c,d,b-a)
    ...: 
    ...: 
5 31 74 100 26
5 44 84 123 39
5 44 100 139 39
8 31 100 123 23
8 44 68 104 36
44 74 93 123 30
68 84 123 139 16
74 93 104 123 19
84 100 123 139 16

In [53]: for a,b,c,d in combinations(lest,r=4):
    ...:     if b-a == d-c:
    ...:         print(a,b,c,d,c-a)
    ...: 
    ...: 
    ...: 
5 31 74 100 69
5 44 84 123 79
5 44 100 139 95
8 31 100 123 92
8 44 68 104 60
44 74 93 123 49
68 84 123 139 55
74 93 104 123 30
84 100 123 139 39

In [54]: lest
Out[54]: [5, 8, 31, 44, 68, 74, 84, 93, 100, 104, 123, 139]

In [55]: [74 ,93, 104, 123, 84, 100, 123, 139, 5 ,31 ,74 ,100]
Out[55]: [74, 93, 104, 123, 84, 100, 123, 139, 5, 31, 74, 100]

In [56]: lest1
Out[56]: [5, 3, 23, 13, 24, 6, 10, 9, 7, 4, 19, 16]

In [57]: lest
Out[57]: [5, 8, 31, 44, 68, 74, 84, 93, 100, 104, 123, 139]

In [58]: ct = [26242498579536691811055981149948736081413123636643477706015419836101346754443, 3032041275524117714109956576526514707563206018380144
    ...: 3609889236855980299685595, 65684356693401962957802832810273549345608027337432965824937963429120291339333, 1502554776554933316895736814917
    ...: 7848577882555487889680742466312084547650972663, 46764069432060214735440855620792051531943268335710103593983788232446614161424, 7157554453
    ...: 1523096893697176151110271985899529970263634996534766185719951232899, 81495475481985036684157025076217549730889942788808748136064587936078
    ...: 66713778, 12081871161483608517505346339140143493132928051760353815508503241747142024697, 656270569320062416747633563390684291882781234346
    ...: 38526706264676467885955099667, 23413741607307309476964696379608864503970503243566103692132654387385869400762, 560144082989827440928736498
    ...: 79675961526790332954773022900206888891912862484806, 77000766146189604405769394813422399327596415228762086351262010618717119973525, 145892
    ...: 46063765426640159853561271509992635998018136452450026806673980229327448]

In [59]: len(ct)
Out[59]: 13

In [60]: lest2 = [74, 93, 104, 123, 84, 100, 123, 139, 5, 31, 74, 100]
    ...: 

In [61]: lest1
Out[61]: [5, 3, 23, 13, 24, 6, 10, 9, 7, 4, 19, 16]

In [62]: lest
Out[62]: [5, 8, 31, 44, 68, 74, 84, 93, 100, 104, 123, 139]

In [63]: lest2
Out[63]: [74, 93, 104, 123, 84, 100, 123, 139, 5, 31, 74, 100]

In [64]: ct
Out[64]: 
[26242498579536691811055981149948736081413123636643477706015419836101346754443,
 30320412755241177141099565765265147075632060183801443609889236855980299685595,
 65684356693401962957802832810273549345608027337432965824937963429120291339333,
 15025547765549333168957368149177848577882555487889680742466312084547650972663,
 46764069432060214735440855620792051531943268335710103593983788232446614161424,
 71575544531523096893697176151110271985899529970263634996534766185719951232899,
 8149547548198503668415702507621754973088994278880874813606458793607866713778,
 12081871161483608517505346339140143493132928051760353815508503241747142024697,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 23413741607307309476964696379608864503970503243566103692132654387385869400762,
 56014408298982744092873649879675961526790332954773022900206888891912862484806,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 14589246063765426640159853561271509992635998018136452450026806673980229327448]

In [65]: cc = []
    ...: for i,j in enumerate(lest2):
    ...:     cc.append(ct[lest.index(j) + 1])
    ...: 
    ...: 

In [66]: cc
Out[66]: 
[8149547548198503668415702507621754973088994278880874813606458793607866713778,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 56014408298982744092873649879675961526790332954773022900206888891912862484806,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 12081871161483608517505346339140143493132928051760353815508503241747142024697,
 23413741607307309476964696379608864503970503243566103692132654387385869400762,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 14589246063765426640159853561271509992635998018136452450026806673980229327448,
 30320412755241177141099565765265147075632060183801443609889236855980299685595,
 15025547765549333168957368149177848577882555487889680742466312084547650972663,
 8149547548198503668415702507621754973088994278880874813606458793607866713778,
 23413741607307309476964696379608864503970503243566103692132654387385869400762]

In [67]: len(cc)
Out[67]: 12

In [68]: (cc[11]-c[10])*(cc[5]-cc[4])*(cc[1]-cc[0])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-68-5fd03fe5d230> in <module>
----> 1 (cc[11]-c[10])*(cc[5]-cc[4])*(cc[1]-cc[0])

TypeError: 'int' object is not subscriptable

In [69]: (cc[11]-cc[10])*(cc[5]-cc[4])*(cc[1]-cc[0])
Out[69]: 9941992254489804313004401574341379411578482529272100970580781919193085823731864923246036459139398234884484146604863835684449106303557292253515925359895914208763548234785986489411031747170806980272586626834495228534701701533746440

In [70]: (cc[9]-cc[8])*(cc[7]-cc[6])*(cc[3]-cc[2])
Out[70]: 20033068774150298955314777432831604659943177948313815721753030542565858214215608273705967958803137591488505538405179582228490626860542893057589642072163375832957632781969019234252282472846324926266831633960045848327703460808654316

In [71]: 20033068774150298955314777432831604659943177948313815721753030542565858214215608273705967958803137591488505538405179582228490626860542893
    ...: 057589642072163375832957632781969019234252282472846324926266831633960045848327703460808654316 - 99419922544898043130044015743413794115784
    ...: 82529272100970580781919193085823731864923246036459139398234884484146604863835684449106303557292253515925359895914208763548234785986489411
    ...: 031747170806980272586626834495228534701701533746440
    ...: 
Out[71]: 10091076519660494642310375858490225248364695419041714751172248623372772390483743350459931499663739356604021391800315746544041520556985600804073716712267461624194084547183032744841250725675517945994245007125550619793001759274907876
'''





''' ➜  leapfrog git:(main) ✗ ipython3
Python 3.8.10 (default, Jun 22 2022, 20:18:18) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: lest2 = [74,93,104,123,44,74,93,123,5,44,84,123]

In [2]: lest = [5, 8, 31, 44, 68, 74, 84, 93, 100, 104, 123, 139]

In [3]: ct = [26242498579536691811055981149948736081413123636643477706015419836101346754443, 30320412755241177141099565765265147075632060183801443
   ...: 609889236855980299685595, 65684356693401962957802832810273549345608027337432965824937963429120291339333, 150255477655493331689573681491778
   ...: 48577882555487889680742466312084547650972663, 46764069432060214735440855620792051531943268335710103593983788232446614161424, 7157554453152
   ...: 3096893697176151110271985899529970263634996534766185719951232899, 814954754819850366841570250762175497308899427888087481360645879360786671
   ...: 3778, 12081871161483608517505346339140143493132928051760353815508503241747142024697, 65627056932006241674763356339068429188278123434638526
   ...: 706264676467885955099667, 23413741607307309476964696379608864503970503243566103692132654387385869400762, 560144082989827440928736498796759
   ...: 61526790332954773022900206888891912862484806, 77000766146189604405769394813422399327596415228762086351262010618717119973525, 1458924606376
   ...: 5426640159853561271509992635998018136452450026806673980229327448]
   ...: 

In [4]: ct
Out[4]: 
[26242498579536691811055981149948736081413123636643477706015419836101346754443,
 30320412755241177141099565765265147075632060183801443609889236855980299685595,
 65684356693401962957802832810273549345608027337432965824937963429120291339333,
 15025547765549333168957368149177848577882555487889680742466312084547650972663,
 46764069432060214735440855620792051531943268335710103593983788232446614161424,
 71575544531523096893697176151110271985899529970263634996534766185719951232899,
 8149547548198503668415702507621754973088994278880874813606458793607866713778,
 12081871161483608517505346339140143493132928051760353815508503241747142024697,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 23413741607307309476964696379608864503970503243566103692132654387385869400762,
 56014408298982744092873649879675961526790332954773022900206888891912862484806,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 14589246063765426640159853561271509992635998018136452450026806673980229327448]

In [5]: len(ct)
Out[5]: 13

In [6]: cc = []

In [7]: for i,j in enumerate(lest2):
   ...:     cc.append(ct[lest.index(j)+1])
   ...: 

In [8]: cc
Out[8]: 
[8149547548198503668415702507621754973088994278880874813606458793607866713778,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 56014408298982744092873649879675961526790332954773022900206888891912862484806,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 46764069432060214735440855620792051531943268335710103593983788232446614161424,
 8149547548198503668415702507621754973088994278880874813606458793607866713778,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 30320412755241177141099565765265147075632060183801443609889236855980299685595,
 46764069432060214735440855620792051531943268335710103593983788232446614161424,
 12081871161483608517505346339140143493132928051760353815508503241747142024697,
 77000766146189604405769394813422399327596415228762086351262010618717119973525]

In [9]: len(cc)
Out[9]: 12

In [10]: (cc[11]-cc[10])*(cc[5]-cc[4])*(cc[1]-cc[0])
    ...: 
Out[10]: -144085315487519151853170450556591092210531690219663166539242126095217571095581725937151782654542519366374342565405566243369081229712893642431298049567053444462591939159511484370130142199485058203609691805487249716591584309801231432

In [11]: (cc[9]-cc[8])*(cc[7]-cc[6])*(cc[3]-cc[2])
    ...: 
Out[11]: 3924981329993726917956648895336070368852978627911194324484419649601252503823331087623270542717423236022417206783056348628690978297949135960482807789083977655822582258260605493576356760654496927344120763278374592828817491685000758

In [12]: z2 = 392498132999372691795664889533607036885297862791119432448441964960125250382333108762327054271742323602241720678305634862869097829794
    ...: 9135960482807789083977655822582258260605493576356760654496927344120763278374592828817491685000758 + 1440853154875191518531704505565910922
    ...: 10531690219663166539242126095217571095581725937151782654542519366374342565405566243369081229712893642431298049567053444462591939159511484
    ...: 370130142199485058203609691805487249716591584309801231432
    ...: 

In [13]: z2
Out[13]: 148010296817512878771127099451927162579384668847574360863726545744818823599405057024775053197259942602396759772188622591997772208010842778391780857356137422118414521417772089863706498960139555130953812568765624309420401801486232190

In [14]: z1 = 100910765196604946423103758584902252483646954190417147511722486233727723904837433504599314996637393566040213918003157465440415205569
    ...: 85600804073716712267461624194084547183032744841250725675517945994245007125550619793001759274907876
    ...: 

In [15]: from Crypto.Util.number import *

In [16]: GCD(z1,z2)
Out[16]: 4474126249116532396003283769923522116050326764154790074857981409140018808156814

In [17]: from sympy import factorint




In [18]: 

In [18]: 

In [18]: 

In [18]: 

In [18]: factorint(4474126249116532396003283769923522116050326764154790074857981409140018808156814)
Out[18]: 
{2: 1,
 3: 3,
 82854189798454303629690440183768928075006051188051668052925581650741089039941: 1}

In [19]: p =  82854189798454303629690440183768928075006051188051668052925581650741089039941

In [20]: p.bit_length()
Out[20]: 256

In [21]: from Crypto.Util.number import *

In [22]: ((cc[3]-cc[2]) * inverse(cc[1]-cc[0] , p))%p
Out[22]: 45148412443614246240728677410161781077180940379024869708677471941261481187810

In [23]: ((cc[7]-cc[6]) * inverse(cc[5]-cc[4] , p))%p
Out[23]: 77645028994712074915506266713201850841838604675672085641597114460337831352758

In [24]: a =  52090040033040396145969121713991672235321119631392930064155091468397683266049

In [25]: ct
Out[25]: 
[26242498579536691811055981149948736081413123636643477706015419836101346754443,
 30320412755241177141099565765265147075632060183801443609889236855980299685595,
 65684356693401962957802832810273549345608027337432965824937963429120291339333,
 15025547765549333168957368149177848577882555487889680742466312084547650972663,
 46764069432060214735440855620792051531943268335710103593983788232446614161424,
 71575544531523096893697176151110271985899529970263634996534766185719951232899,
 8149547548198503668415702507621754973088994278880874813606458793607866713778,
 12081871161483608517505346339140143493132928051760353815508503241747142024697,
 65627056932006241674763356339068429188278123434638526706264676467885955099667,
 23413741607307309476964696379608864503970503243566103692132654387385869400762,
 56014408298982744092873649879675961526790332954773022900206888891912862484806,
 77000766146189604405769394813422399327596415228762086351262010618717119973525,
 14589246063765426640159853561271509992635998018136452450026806673980229327448]

In [26]: len(ct)
Out[26]: 13

In [27]: a
Out[27]: 52090040033040396145969121713991672235321119631392930064155091468397683266049

In [28]: a**5 %p
Out[28]: 5608316874460872904176122225388978432230362488005256636620312468749764166654

In [29]: ct[1]-((a**5)%p *ct[0])%p
Out[29]: -28451763356836393295978000116465363087907393473957906860429770621763624414875

In [30]: ((ct[1]-((a**5)%p *ct[0])%p) * inverse(a**5-1,p) )%p
Out[30]: 57928885056194543615210256356879769628629967995426284178424146648139352146141

In [31]: bdash = 57928885056194543615210256356879769628629967995426284178424146648139352146141
    ...: 

In [32]: p
Out[32]: 82854189798454303629690440183768928075006051188051668052925581650741089039941

In [33]: (bdash * (a-1) )%p
Out[33]: 38843617848108773397122963244804118243817350302362995127983202263014562244895

In [34]: flag = '05ac5b17c67bcfbf5c43fa9d319cfc4c62ee1ce1ab2130846f776e783e5797ac1c02a34045e4130f3b8111e57397df344bd0e14f3df4f1a822c43c7a89fd4113f
    ...: 9a7702b0b0e0b0473a2cbac25e1dd9c'

In [35]: a
Out[35]: 52090040033040396145969121713991672235321119631392930064155091468397683266049

In [36]: b
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-36-89e6c98d9288> in <module>
----> 1 b

NameError: name 'b' is not defined

In [37]: b = 38843617848108773397122963244804118243817350302362995127983202263014562244895
    ...: 

In [38]: p
Out[38]: 82854189798454303629690440183768928075006051188051668052925581650741089039941

In [39]: key = sha256(b"".join([long_to_bytes(x) for x in [a, b, p]])).digest()[:16]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-39-3539b8e7276a> in <module>
----> 1 key = sha256(b"".join([long_to_bytes(x) for x in [a, b, p]])).digest()[:16]

NameError: name 'sha256' is not defined

In [40]: from hashlib import sha256

In [41]: key = sha256(b"".join([long_to_bytes(x) for x in [a, b, p]])).digest()[:16]

In [42]: key
Out[42]: b'\xf25\xb2\x0b\x1d1\x0f\x9dU\xb9qQ\x16\r\x86\xc1'

In [43]: flag = bytes.fromhex(flag)

In [44]: flag
Out[44]: b'\x05\xac[\x17\xc6{\xcf\xbf\\C\xfa\x9d1\x9c\xfcLb\xee\x1c\xe1\xab!0\x84ownx>W\x97\xac\x1c\x02\xa3@E\xe4\x13\x0f;\x81\x11\xe5s\x97\xdf4K\xd0\xe1O=\xf4\xf1\xa8"\xc4<z\x89\xfdA\x13\xf9\xa7p+\x0b\x0e\x0b\x04s\xa2\xcb\xac%\xe1\xdd\x9c'

In [45]: iv = flag[:16]

In [46]: flag = flag[16:]

In [47]: from Crypto.Cipher import AES

In [48]: cipher = AES.new(key, AES.MODE_CBC, iv=iv)

In [49]: cipher.decrypt(flag)
Out[49]: b'corctf{:msfrog:_is_pr0ud_0f_y0ur_l34pfr0gg1ng_4b1lit135}\x08\x08\x08\x08\x08\x08\x08\x08'
'''
