

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256); _sage_const_240 = Integer(240); _sage_const_65537 = Integer(65537); _sage_const_9554594442777956156176575410111600195877530714413341173170684511629274299512228887424722865581070074211220073375779601169613670191773041155190935992384503 = Integer(9554594442777956156176575410111600195877530714413341173170684511629274299512228887424722865581070074211220073375779601169613670191773041155190935992384503); _sage_const_7461675696855485192498077806574979378047894821983865815839657530422849448689515297532903764658811059355302125460753210703381969189642182146350648776660800 = Integer(7461675696855485192498077806574979378047894821983865815839657530422849448689515297532903764658811059355302125460753210703381969189642182146350648776660800); _sage_const_9434068242398921342211002064324465916062393376458086291548511274573416249033581548777010110839749584250133350250249137285226277646494093017384578041939028 = Integer(9434068242398921342211002064324465916062393376458086291548511274573416249033581548777010110839749584250133350250249137285226277646494093017384578041939028); _sage_const_2307392417341885799596739085844264179388900683812340084993018869836755199903738815754854447496349782908851273354288563878127053152518798853361786098790086 = Integer(2307392417341885799596739085844264179388900683812340084993018869836755199903738815754854447496349782908851273354288563878127053152518798853361786098790086); _sage_const_8088051586635397321367808834017662405062741020871047546836555202710334915714609790269314128181137793132378471121286052630286539914489786777057686952350201 = Integer(8088051586635397321367808834017662405062741020871047546836555202710334915714609790269314128181137793132378471121286052630286539914489786777057686952350201); _sage_const_2820607551983845230812303368005639695109422590147246290345429705320752894016316200148900472636430606697622288535569496994810765077588892270595919635187359 = Integer(2820607551983845230812303368005639695109422590147246290345429705320752894016316200148900472636430606697622288535569496994810765077588892270595919635187359); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_32 = Integer(32); _sage_const_0 = Integer(0)
from Crypto.Util.number import *

nbits, rbits = _sage_const_256 , _sage_const_240 
e = _sage_const_65537 

N = _sage_const_9554594442777956156176575410111600195877530714413341173170684511629274299512228887424722865581070074211220073375779601169613670191773041155190935992384503 
A = _sage_const_7461675696855485192498077806574979378047894821983865815839657530422849448689515297532903764658811059355302125460753210703381969189642182146350648776660800 
B = _sage_const_9434068242398921342211002064324465916062393376458086291548511274573416249033581548777010110839749584250133350250249137285226277646494093017384578041939028 
X = _sage_const_2307392417341885799596739085844264179388900683812340084993018869836755199903738815754854447496349782908851273354288563878127053152518798853361786098790086 
Y = _sage_const_8088051586635397321367808834017662405062741020871047546836555202710334915714609790269314128181137793132378471121286052630286539914489786777057686952350201 
ct = _sage_const_2820607551983845230812303368005639695109422590147246290345429705320752894016316200148900472636430606697622288535569496994810765077588892270595919635187359 

zmodn = Zmod(N)
P = PolynomialRing(zmodn,implementation = 'NTL', names=('x',)); (x,) = P._first_ngens(1)
P = PolynomialRing(zmodn,implementation = 'NTL', names=('y',)); (y,) = P._first_ngens(1)

f = (e * x + A)**_sage_const_2  - X
root1 = f.monic().small_roots(X = _sage_const_2 **_sage_const_240  ,epsilon = _sage_const_1 /_sage_const_32 )

if len(root1) != _sage_const_0 :
	print("Found x :",root1[_sage_const_0 ])

f2 = (e * y + B)**_sage_const_2  - Y
root2 = f2.monic().small_roots(X = _sage_const_2 **_sage_const_240 , epsilon = _sage_const_1 /_sage_const_32 )

if len(root2) != _sage_const_0 :
	print("Found y :",root2[_sage_const_0 ])

val1 = ( pow(A,int(root2[_sage_const_0 ]),N) - pow( inverse(int(root1[_sage_const_0 ]),N), (int(root1[_sage_const_0 ])*int(root2[_sage_const_0 ])),N) * pow(B,int(root1[_sage_const_0 ]),N) )%N

print(val1)

q = GCD(int(val1),N)
p = N // q

e = _sage_const_65537 
d = inverse(e,(p-_sage_const_1 ) * (q-_sage_const_1 ))

print(long_to_bytes(int(pow(ct,d, N))))

