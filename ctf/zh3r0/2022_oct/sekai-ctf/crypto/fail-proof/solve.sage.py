

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_73 = Integer(73); _sage_const_67 = Integer(67); _sage_const_61 = Integer(61); _sage_const_66 = Integer(66); _sage_const_65 = Integer(65); _sage_const_62 = Integer(62); _sage_const_69 = Integer(69); _sage_const_76 = Integer(76); _sage_const_70 = Integer(70); _sage_const_75 = Integer(75); _sage_const_64 = Integer(64); _sage_const_82 = Integer(82); _sage_const_63 = Integer(63); _sage_const_83 = Integer(83); _sage_const_72 = Integer(72); _sage_const_84 = Integer(84); _sage_const_74 = Integer(74); _sage_const_77 = Integer(77); _sage_const_58 = Integer(58); _sage_const_68 = Integer(68); _sage_const_71 = Integer(71); _sage_const_60 = Integer(60); _sage_const_78 = Integer(78); _sage_const_59 = Integer(59); _sage_const_79 = Integer(79); _sage_const_81 = Integer(81); _sage_const_56 = Integer(56); _sage_const_80 = Integer(80); _sage_const_85 = Integer(85); _sage_const_57 = Integer(57); _sage_const_52 = Integer(52); _sage_const_28 = Integer(28); _sage_const_34 = Integer(34); _sage_const_26 = Integer(26); _sage_const_30 = Integer(30); _sage_const_29 = Integer(29); _sage_const_24 = Integer(24); _sage_const_27 = Integer(27); _sage_const_21 = Integer(21); _sage_const_35 = Integer(35); _sage_const_33 = Integer(33); _sage_const_32 = Integer(32); _sage_const_36 = Integer(36); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_25 = Integer(25); _sage_const_23 = Integer(23); _sage_const_39 = Integer(39); _sage_const_22 = Integer(22)
from Crypto.Util.number import *
import hashlib

secret = 'c06724d7461f70dbc66e3eff6b28b4e5'
secret = bytes.fromhex(secret)

def gen_pubkey(secret: bytes, hasher=hashlib.sha512) -> list:
    def hash(m): return hasher(m).digest()
    state = hash(secret)
    pubkey = []
    for _ in range(len(hash(b'0')) * _sage_const_4 ):
        pubkey.append(int.from_bytes(state, 'big'))
        state = hash(state)
    return pubkey

A = gen_pubkey(secret, hashlib.sha256)

print(A)

mat = []
for row in A:
	row1 = []
	for boolvar in "{:0256b}".format(row):
		if boolvar == '1':
			row1.append(_sage_const_1 )
		else:
			row1.append(_sage_const_0 )
	mat.append(row1)
	print(len(row1))

print(mat)

print(len(mat),len(mat[_sage_const_0 ]))

lest = [[_sage_const_73 , _sage_const_67 , _sage_const_73 , _sage_const_61 , _sage_const_66 , _sage_const_65 , _sage_const_62 , _sage_const_69 , _sage_const_76 , _sage_const_69 , _sage_const_70 , _sage_const_76 , _sage_const_75 , _sage_const_62 , _sage_const_64 , _sage_const_76 , _sage_const_66 , _sage_const_70 , _sage_const_66 , _sage_const_66 , _sage_const_75 , _sage_const_76 , _sage_const_82 , _sage_const_66 , _sage_const_66 , _sage_const_63 , _sage_const_69 , _sage_const_83 , _sage_const_69 , _sage_const_67 , _sage_const_72 , _sage_const_70 , _sage_const_66 , _sage_const_84 , _sage_const_61 , _sage_const_67 , _sage_const_74 , _sage_const_72 , _sage_const_64 , _sage_const_64 , _sage_const_77 , _sage_const_75 , _sage_const_76 , _sage_const_70 , _sage_const_67 , _sage_const_58 , _sage_const_75 , _sage_const_77 , _sage_const_64 , _sage_const_66 , _sage_const_73 , _sage_const_69 , _sage_const_66 , _sage_const_61 , _sage_const_70 , _sage_const_69 , _sage_const_61 , _sage_const_72 , _sage_const_65 , _sage_const_70 , _sage_const_68 , _sage_const_73 , _sage_const_77 , _sage_const_68 , _sage_const_66 , _sage_const_71 , _sage_const_71 , _sage_const_73 , _sage_const_73 , _sage_const_77 , _sage_const_60 , _sage_const_78 , _sage_const_74 , _sage_const_68 , _sage_const_61 , _sage_const_73 , _sage_const_75 , _sage_const_63 , _sage_const_75 , _sage_const_78 , _sage_const_62 , _sage_const_66 , _sage_const_59 , _sage_const_79 , _sage_const_68 , _sage_const_68 , _sage_const_72 , _sage_const_83 , _sage_const_75 , _sage_const_69 , _sage_const_76 , _sage_const_75 , _sage_const_73 , _sage_const_77 , _sage_const_64 , _sage_const_70 , _sage_const_67 , _sage_const_74 , _sage_const_73 , _sage_const_78 , _sage_const_81 , _sage_const_73 , _sage_const_74 , _sage_const_61 , _sage_const_81 , _sage_const_68 , _sage_const_70 , _sage_const_67 , _sage_const_68 , _sage_const_75 , _sage_const_72 , _sage_const_66 , _sage_const_79 , _sage_const_72 , _sage_const_73 , _sage_const_72 , _sage_const_68 , _sage_const_69 , _sage_const_79 , _sage_const_66 , _sage_const_72 , _sage_const_74 , _sage_const_68 , _sage_const_66 , _sage_const_71 , _sage_const_61 , _sage_const_69 , _sage_const_66 ], [_sage_const_69 , _sage_const_61 , _sage_const_68 , _sage_const_63 , _sage_const_65 , _sage_const_56 , _sage_const_65 , _sage_const_71 , _sage_const_73 , _sage_const_67 , _sage_const_78 , _sage_const_74 , _sage_const_80 , _sage_const_62 , _sage_const_58 , _sage_const_67 , _sage_const_70 , _sage_const_70 , _sage_const_68 , _sage_const_63 , _sage_const_76 , _sage_const_70 , _sage_const_69 , _sage_const_69 , _sage_const_63 , _sage_const_64 , _sage_const_76 , _sage_const_73 , _sage_const_63 , _sage_const_61 , _sage_const_67 , _sage_const_67 , _sage_const_63 , _sage_const_85 , _sage_const_57 , _sage_const_70 , _sage_const_62 , _sage_const_74 , _sage_const_52 , _sage_const_69 , _sage_const_75 , _sage_const_66 , _sage_const_69 , _sage_const_67 , _sage_const_73 , _sage_const_56 , _sage_const_74 , _sage_const_74 , _sage_const_60 , _sage_const_67 , _sage_const_70 , _sage_const_59 , _sage_const_69 , _sage_const_67 , _sage_const_71 , _sage_const_63 , _sage_const_69 , _sage_const_65 , _sage_const_66 , _sage_const_69 , _sage_const_73 , _sage_const_72 , _sage_const_67 , _sage_const_66 , _sage_const_67 , _sage_const_62 , _sage_const_64 , _sage_const_69 , _sage_const_69 , _sage_const_79 , _sage_const_63 , _sage_const_69 , _sage_const_73 , _sage_const_62 , _sage_const_64 , _sage_const_70 , _sage_const_72 , _sage_const_73 , _sage_const_69 , _sage_const_75 , _sage_const_62 , _sage_const_66 , _sage_const_57 , _sage_const_76 , _sage_const_72 , _sage_const_67 , _sage_const_66 , _sage_const_75 , _sage_const_72 , _sage_const_61 , _sage_const_80 , _sage_const_63 , _sage_const_64 , _sage_const_74 , _sage_const_63 , _sage_const_72 , _sage_const_61 , _sage_const_61 , _sage_const_70 , _sage_const_71 , _sage_const_75 , _sage_const_67 , _sage_const_79 , _sage_const_66 , _sage_const_71 , _sage_const_72 , _sage_const_65 , _sage_const_64 , _sage_const_67 , _sage_const_75 , _sage_const_70 , _sage_const_70 , _sage_const_72 , _sage_const_66 , _sage_const_72 , _sage_const_66 , _sage_const_61 , _sage_const_73 , _sage_const_81 , _sage_const_65 , _sage_const_65 , _sage_const_69 , _sage_const_71 , _sage_const_68 , _sage_const_69 , _sage_const_65 , _sage_const_70 , _sage_const_67 ], [_sage_const_28 , _sage_const_34 , _sage_const_26 , _sage_const_30 , _sage_const_29 , _sage_const_24 , _sage_const_27 , _sage_const_21 , _sage_const_35 , _sage_const_33 , _sage_const_32 , _sage_const_34 , _sage_const_36 , _sage_const_28 , _sage_const_28 , _sage_const_33 , _sage_const_33 , _sage_const_30 , _sage_const_28 , _sage_const_31 , _sage_const_37 , _sage_const_26 , _sage_const_34 , _sage_const_34 , _sage_const_30 , _sage_const_25 , _sage_const_31 , _sage_const_31 , _sage_const_30 , _sage_const_23 , _sage_const_28 , _sage_const_27 , _sage_const_30 , _sage_const_39 , _sage_const_32 , _sage_const_32 , _sage_const_27 , _sage_const_31 , _sage_const_29 , _sage_const_30 , _sage_const_39 , _sage_const_28 , _sage_const_27 , _sage_const_30 , _sage_const_28 , _sage_const_21 , _sage_const_34 , _sage_const_29 , _sage_const_22 , _sage_const_26 , _sage_const_28 , _sage_const_28 , _sage_const_34 , _sage_const_28 , _sage_const_34 , _sage_const_29 , _sage_const_27 , _sage_const_33 , _sage_const_28 , _sage_const_35 , _sage_const_29 , _sage_const_28 , _sage_const_28 , _sage_const_32 , _sage_const_28 , _sage_const_33 , _sage_const_34 , _sage_const_26 , _sage_const_27 , _sage_const_34 , _sage_const_30 , _sage_const_30 , _sage_const_32 , _sage_const_25 , _sage_const_23 , _sage_const_25 , _sage_const_35 , _sage_const_27 , _sage_const_30 , _sage_const_32 , _sage_const_24 , _sage_const_32 , _sage_const_24 , _sage_const_32 , _sage_const_30 , _sage_const_24 , _sage_const_29 , _sage_const_33 , _sage_const_27 , _sage_const_27 , _sage_const_28 , _sage_const_34 , _sage_const_31 , _sage_const_33 , _sage_const_27 , _sage_const_32 , _sage_const_22 , _sage_const_29 , _sage_const_33 , _sage_const_23 , _sage_const_31 , _sage_const_29 , _sage_const_29 , _sage_const_29 , _sage_const_32 , _sage_const_32 , _sage_const_25 , _sage_const_30 , _sage_const_36 , _sage_const_26 , _sage_const_30 , _sage_const_33 , _sage_const_30 , _sage_const_22 , _sage_const_32 , _sage_const_36 , _sage_const_27 , _sage_const_30 , _sage_const_35 , _sage_const_25 , _sage_const_28 , _sage_const_39 , _sage_const_29 , _sage_const_27 , _sage_const_23 , _sage_const_33 , _sage_const_33 , _sage_const_29 ]]


for ct in lest:
	front = Matrix(ZZ,mat)
	back = Matrix(ZZ,ct)
	print(front.is_invertible())
	ans = front.inverse() * back
	print(ans)
	
	

