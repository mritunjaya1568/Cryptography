from Crypto.Util.number import *

val = '0x00bb1f18d61d23a32f86dbe3225bd7a56ca65ac16992750bd0f28bbaf977f74ee9ca07e53dc19da09197edae4383126861a75a717b8412af4f5d813dc18d23ea838efdfb251abe1e9515882726d2c18ccb68b981051d9360d3db5679a608a6087a19c767e665046506f878c404431830fe9b492c4443f58b35c2678808d2dc21fbbe6936dbf50fdc4b50066b31855734e9082b162b915b131e7ea7106101e377ae3b2dd76e481d4b40d0c6158ac7cfe73362d6c87a48f37b57781cd71e19deb6078db42d2b59acfec79c7fb30da67039f2b2e98dd11ee4ecb5581050f1f98a51966f42eb1ca01532738698d3492dd46fa851e9cfed3343a232c45652aa7063b13b'
n = int(val,16)


from math import log
from gmpy2 import iroot
from z3 import *

def functor(b,c):
	det = b * b - 4 * c
	root = iroot(det,2)
	if root[1] == False:
		return 0,0
	print("Determinant Found")
	return (-b + root[0])//2 , (-b - root[0])//2



# n = 23621897539318735382781746886812894513691748769885872561608018745569703193093855463437952944858188722853908795670837963164709616242593638401041032595833264922632543233131776723436806335966522962980332524550454606209746603582382656306848557857064499642423449000991045716976106596626510521840476248557767311518172872788877427817242273511650663556017746625391305473837996013171596099512668142370526423632408066956471075397237532978090078953286385148467587638857728496028131872602103616105358742971697903227400622583960651099656237391304458477107349123418958226433986832338800716565565348303844157431915191481285604520251
pow_2 = 2 ** 1021

# from prime number theorem
val = int(log(1<<1025))


for i in range(val):
	print(i)
	a,b = functor(-pow_2 - 2 * i, -n)
	if a == 0 and b == 0:
		continue

	print("Found a and b")
	p = abs(a)
	q = abs(b)
	assert p * q == n
	print("Found p and q")
	print(p,q)
	break

if a == 0 and b == 0:
	print("Checking Second case when q > p")

	for i in range(val):
		print(i)
		a,b = functor(pow_2 + 2 * i, -n)
		if a == 0 and b == 0:
			continue

		print("Found p")
		print(a,b)
		break

assert p * q == n
e = 65537
d = int(inverse(e,(p-1) * (q-1)))
print(d)

from Crypto.PublicKey import RSA

x = RSA.construct( (n,e,d) )
f = open("private.pem",'wb').write(x.exportKey())

