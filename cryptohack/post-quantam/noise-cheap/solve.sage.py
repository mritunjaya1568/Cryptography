

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_64 = Integer(64); _sage_const_257 = Integer(257); _sage_const_1048583 = Integer(1048583); _sage_const_13413 = Integer(13413); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
import json
from pwn import remote
from tqdm import tqdm
from sage.all import *


def json_recv():
    line = r.recvline()
    return json.loads(line.decode())

def json_send(hsh):
    request = json.dumps(hsh).encode()
    r.sendline(request)

# dimension
n = _sage_const_64 
n_equations = _sage_const_64 
# plaintext modulus
p = _sage_const_257 
# ciphertext modulus
q = _sage_const_1048583 

# r = remote('socket.cryptohack.org', 13413)
r = remote('localhost', _sage_const_13413 )
r.recvline()

M = []
b = []
print("[+] Collecting Equations:")
for _ in tqdm(range(n_equations)):
    json_send({"option": "encrypt", "message": "0"})
    j = json_recv()
    M.append(eval(j['A']))
    b.append(eval(j['b']))

M = Matrix(ZZ, M)
# b = Matrix(ZZ, b)
L = M.transpose()
L = L.stack(q * identity_matrix(n_equations))
L = L.stack(p * identity_matrix(n_equations))
for i in range(n):
    L = L.augment(vector(ZZ,[_sage_const_0 ]*i+[_sage_const_1 ]+[_sage_const_0 ]*(n-i-_sage_const_1 +_sage_const_2 *n_equations)))
for i in range(n_equations):
    L = L.augment(vector(ZZ, [_sage_const_0 ] * n + [_sage_const_0 ] * n_equations + i * [_sage_const_0 ] + [q] + (n_equations-i-_sage_const_1 ) * [_sage_const_0 ]))

# L = (-1*matrix(ZZ,b + [0] *(n+n_equations))).stack(L)
# L = L.augment(vector(ZZ,[q]+[0]*(n+2*n_equations)))

print("[+] Performing LLL")
Mred = L.LLL()

print("[+] Checking result")

from sage.modules.free_module_integer import IntegerLattice

# From https://oddcoder.com/LOL-34c3/, https://hackmd.io/@hakatashi/B1OM7HFVI
print("[+] Performing CVP")
def Babai_CVP(mat, target):
    M = IntegerLattice(mat, lll_reduce=True).reduced_basis
    G = M.gram_schmidt()[_sage_const_0 ]
    diff = target
    for i in reversed(range(G.nrows())):
        diff -=  M[i] * ((diff * G[i]) / (G[i] * G[i])).round()
    return target - diff

cvp_vec = Babai_CVP(Mred, vector(b + [_sage_const_0 ]*n+ [q]*(n_equations)))
print(cvp_vec - vector(b + [_sage_const_0 ]*n+ [q]*(n_equations)))

