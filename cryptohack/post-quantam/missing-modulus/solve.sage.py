

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_257 = Integer(257); _sage_const_6007 = Integer(6007); _sage_const_13412 = Integer(13412); _sage_const_1 = Integer(1)
from pwn import *
from sage.all import *
import json
from Crypto.Util.number import *
from tqdm import tqdm

def json_send(hsh):
	request = json.dumps(hsh).encode()
	r.sendline(request)

def json_recv():
	line = r.recvline()
	return json.loads(line.decode())

# dimensions
n = _sage_const_512 
n_equations = _sage_const_512 
FLAG = b'crypto{??????????????????????????????????????}'
flag_len = len(FLAG)
# plaintext modulus
p = _sage_const_257 
# ciphertext modulus
q = _sage_const_6007 
# message scaling factor
delta = int(round(q/p))

HOST = 'socket.cryptohack.org'
# HOST = 'localhost'
PORT = _sage_const_13412 

r = remote(HOST,PORT)
print(r.recvline())

M = []
b = []
print("[+] Collecting Equations for encrypt:")
for _ in tqdm(range(n_equations)):
	json_send({"option":"encrypt", "message":"0"})
	j = json_recv()
	M.append(eval(j['A']))
	b.append(eval(j['b']))

M = matrix(ZZ, M)
b = matrix(ZZ, b)
L = (-b).stack(M.T)
# L = L.augment(vector(ZZ,[q] +[0] * n_equations))

print("[+] Performing LLL")
Lred = L.LLL()

print("[+] Checking Results:")
for i in Lred:
	if i[-_sage_const_1 ] in [-q,q]:
		err = -_sage_const_1  * vector(ZZ,i[:-_sage_const_1 ]) if i[-_sage_const_1 ] == q else vector(ZZ,i[-_sage_const_1 ])
		break

S = M.augment(vector(b)- err, subdivide = True)
S = S.rref().columns()[-_sage_const_1 ]
print("Got S:")
print(S)

flag = ''
print("[+] Collecting Equations for Flag:")
for i in tqdm(range(flag_len)):
	json_send({"option":"get_flag","index":f"{i}"})
	j = json_recv()
	A = eval(j['A'])
	b = eval(j['b'])
	flag += chr(int(round((b - vector(A) * vector(S))/delta)))

print("[+] Got the Flag:",flag)

### crypto{learning-is-easy-over-the-real-numbers} 






