

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_512 = Integer(512); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1)
from Crypto.Util.number import *
from sage.all import *
from sage.modules.free_module_integer import IntegerLattice

f = open("public_key.txt",'r')

pub_key = [list( map( int,line.strip().split() ) ) for line in f.readlines()]
pk_last = pub_key.pop()
A = pub_key[::]
pub_key.insert(_sage_const_0 , pk_last)

M = matrix(ZZ, pub_key)
M = M.stack(_sage_const_2 **_sage_const_16  * identity_matrix(_sage_const_512 ))

Mred = M.LLL()

functor = lambda x: (x>=(-_sage_const_100 ) and x<=_sage_const_100 )
err_list = [row for row in Mred if row!=vector(ZZ,_sage_const_512 ) if all([functor(x) for x in row])]

add_err = vector(Zmod(_sage_const_2 **_sage_const_16 ),vector(pk_last)+err_list[_sage_const_0 ])
sub_err = vector(Zmod(_sage_const_2 **_sage_const_16 ),vector(pk_last)-err_list[_sage_const_0 ])

try:
    s = matrix(Zmod(_sage_const_2 **_sage_const_16 ),A).solve_left(add_err)
except:
    s = matrix(Zmod(_sage_const_2 **_sage_const_16 ),A).solve_left(sub_err)

f = open("ciphertexts.txt",'r')
ct = [list( map( int,line.strip().split() ) ) for line in f.readlines()]

sk = vector(list(-s) + [_sage_const_1 ])
decrypt = lambda x: int((vector(x)*sk)) & _sage_const_1 

flag = ''.join(str(i) for i in [decrypt(cip) for cip in ct])
print(long_to_bytes(int(flag,_sage_const_2 )))

# crypto{flavortext-flag-coprime-regev-yadda-yadda}

