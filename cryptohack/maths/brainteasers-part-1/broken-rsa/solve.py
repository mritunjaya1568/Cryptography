from Crypto.Util.number import *
from gmpy2 import iroot

n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
e = 16
ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351073443218911356328815458050694493726951231241096695626477586428880220528001269746547018741237131741255022371957489462380305100634600499204435763201371188769446054925748151987175656677342779043435047048130599123081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718

print(isPrime(n))

#since this is already prime so we can find out easily phi = p-1

phi = n-1

gcd = GCD(e,phi) #8
print(gcd)

d = inverse(e,phi)



msg1 = pow(ct,d,n) # (original_msg)^gcd(e,phi) = pow(ct,d,n) = msg1

print(msg1)





# print(long_to_bytes(flag).decode())

lest = [133707155336421411889306987407657823691387782750625431175394153252389679328080550789263073137172912564340992728590367579804708323572982310728306699138641085703468154531798733428351933887786456051713245297094079388690616746062093049573187183364716359382354218025593597299832282017987715084510029925180603964551767250165996734205210361024457733153724288780129621535840550561094253066568716668078234729413851960531924024806179657367268083059650197486201419568082424106668229421873377157138969621534250468372797867838018492649279410989062081770301947482828608998471037916971693652955924340137443542520283778604352119898,27639150254538836117526683923806554152152919401679616020724013685498113344995287344751718533449537073415662442353526628308213023103061863497896489593369348085794160954919027085159031178392852581432880245395841918813747022880685040601417416149729797172122855736247410876267360953517074227907240902800628075285412899840557483663711504959852410070565577024659875453520640653297916237770031000855585962382639354784703984585678728057843168329955896473548276948111382809630447320029976433263878212221081630367881077994263527090273158447369203882719484516440451703862371993997544367674796258943390572142068512622256979234975]
lest2 = []
for i in lest:
	lest2.append(mod(i,n).sqrt(all= True))


lest3= [7714415137987866747074806358152518716625888227680873663074779506877551278629855228569924223453622840867331183537741302167114521117352553354188998788804026087214633186651558187598063519675223044713523686538430951730538270932359635252312932179917340530328977612379304158146654268245216142512438044928697208600606248912165757495282233363016735472944072501958355186943796975428883753207070581755602763063375527935401427838095698004773520144952103726172799591741286430327893153350763123392794847863086593436432438208765177417613596373926184584834576967747135952558927838740488546461301005259539983486016411307685482244211, 20058442271887390782341184553061693259218418956749367788824628331872951745693512666971057383133087145112672251544375693720903210309282292454435797503703963084282995922799267630989319592605415992771069804154505046471899368694387498398677671153177173001176232341893700315420538967289845800479312887797111470649358418178557722902634481957860132330775228811481649888112684228430126737629529135768061434048677678809834480772389209710436916268063442944861678775938178803409222396101086687028222333979529287399821437653336368165308841484432081379655209496176144360301915193174027514866451178023988032198572385093175849110662,10673881512446800813221719983798855110890210541823747522840252972046945135860412947628972734034370633774013259598618490095899745522551146518943293621089309257305731350910629856013468502997046998610873269607899842622000301467288513500546364710725786752032130401884961792365096556306382866623196383670146882855508562995456292718734461855726708424432019549704105012050963619548030648055075573812469822004182718013404924818600316009198721023948040082374004246084961842473499361366541604097282382118427711534367274795560510980423812650857159138020566290548313461731340026093489798548567815659835958365412740234587630098936, 17098975897428456716194270927415356864954096642606493929059154866703557888462954947912008872552339352205990175483498505792117985904083699289681502671418679914191897758540195962573914609283592038873720221085036155580437338159458620150444238622368726779473079552388042681202096679228679076368554549055661796394456104095267187679182253465150159379287281763735900063005517584310979842781524143711194375107870488731830983791884591706011715389067506588660474121594503391263616188085308206323734799724188169301886601066541034602498625207501106826469220173374966851129503005821026262779184367623692057319176056166273701255937]
lest4 =[]
for i in lest3:
	lest4.append(mod(i,n).sqrt(all = True))

	
lest5 = [4630361540119164638498318880320757224917973066675767169076022453085735149562954575209814363023887599722953966126514746206394662283584514894244940779217406676431236969298024848905285314320974655688614456863292576319637071761610469243805956404043991147459322825701729779874144173432471630489234834727790764147507262408574668434851900809737757962150126473526369201692631736829290155061667970351704759675524530807701076072222629503408993408471396130684817663824749056660925873736453124432277438917606895000162811273730240312127883638799174130142263676875753527386097040244568213368833271061688815949241840749146936342957, 23142495869756092890917672030893454750926334117754474282823385385664767874760413320331167243562822386257049468955602249681623069143050330914379855513290582495066392140152800969682097797959664381795979033829643421882800567865136664407184646929050522384045887128571274693693049062102590312502516097998017915102457404682148811963064814511139109841569174839913635873363849467029720335774931747171959437436528675937534832538262278211801443004544150540349660703854716177076189675715396685988739742925008985836091064588371305270794554219559091834347522787047526785474745991669947847958918912221839199735346955651714395011916,3539237778217166137842555505989117928829373135679837081419793629975084339895165734744802166985243124825558545835111376731639963926630733027020121729222875979138253687409199990746840367239948177008792432240913040959783652482774028474930018387772452212315504588656134688759198795637320603697276380147029386127517034728685287241008264454039149966809075617511786899506397040329859490325408881358346677488650021265701441002763289567009616142451526468236858947361753824473530778652420098975754873762941, 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995884478493648417679670782240786518871242668255973770988737167589482305554697589427755948133831217194514801188587815879226601454549604874476927252882744344317256396808255582550941978968312010016490081931048157003674361093215320945272838509986687284028991543505902180465028764465401474732603047959528463455521587693401684330259430026213913640315266928039931940062910914620141512756390510844994503754868094272416592656824961726496896913664170409316563677657113965998358809997237032168697425106457591932, 12035293233818340929574957471350586537102947310810368042471057797232790170875845150488308968620457271500000708809329997773062112320113760841848786679306870933361979199866851500934202633858361349663909032008161676674508652582183205744485088274351540675170575550949701943541825648400667749194676535923965610977237174625344183979939440175613426110052072774048120551405180768163141427119680261924704522719943512429440357912085349526769386737667369235691158185795806722466588046809551784989163943905925849537053349591178585808467351681061334834535098551061323044111890382507126874939822001905954801533701871344057522645080, 15737564176056916599841033439863625438741359873619873409428350041517712853447522745052672637966252714480002726272786998114955619106521084966776009613201118238135649909583974317653180478422277687820684458684774321527928987044563927906505515058742972856334634403323302530025367587134394193797074396801843068272727492465379296417977275145263441693667228539391884523651300435695869063716919455598959674392109694315795550698399558188441049675348177435343320181883658511270527502642298025431853237936690031299200526270922959774455086177296931129954687912861957268748952649407389186387930181377573214150886925056803808709793, 8641193084630835078781960729326154691277481251785227519040342025404581779021267744819343512306798872763414607838291508657015668328076920899003519564096507099659767517996462125002517796978879450563285224128999930590857350430561342116466833170797835925580962732651804341403528172806599162052851854297948186710449832526600695513390894474052550518232514835725503509214402360026644281769456259235942564623435050605591679364340655807801057347553738543963476243501794637726739064864349738727544003494877557315009597267225664763710045978917149606272530539010986831154284729835623695349775835723921166898168605699686304226409, 19131664325244422450634030181888057284566825932645013932859065813345921245302100150721638094279911113216588827243825487231002063098557924909621276728411482071837861591454363693584865315301759586921308266563936067611580289196185791534523770162296677605924247221621200132163665062728462780938899078427860492539514834564122784884525820846824317285486786477714501565842078843832366209067143458287721632488618156139644229246144251907409379065461808127071002124177670596010376484587500071693473178347738323521244278594875880819212391879441116358217255924912293481706558302078892365977976347559606848786420190701175027128464]

for i in lest5:
	print(long_to_bytes(i))


'''b"Hey, if you are reading this maybe I didn't mess up my code too much. Phew. I really should play more CryptoHack before rushing to code stuff from scratch again. Here's the flag: crypto{m0dul4r_squ4r3_r00t}"
'''