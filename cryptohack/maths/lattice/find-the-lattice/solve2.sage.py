

# This file was *autogenerated* from the file solve2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257 = Integer(7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257); _sage_const_2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800 = Integer(2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800); _sage_const_5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523 = Integer(5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from fpylll import CVP
from fpylll import IntegerMatrix
from Crypto.Util.number import *

q,h = map(int,(_sage_const_7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257 , _sage_const_2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800 ))
e = _sage_const_5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523 

M = matrix(ZZ,[[h,_sage_const_1 ],[q,_sage_const_0 ]])
Mred = M.LLL()

L = IntegerMatrix.from_matrix(Mred)
v = CVP.closest_vector(L, (e,_sage_const_0 ))

# e - rdash * h -= (approximately close to m)
flag = int(( vector(GF(q),(e,_sage_const_0 )) - vector(GF(q),v) )[_sage_const_0 ]) % int((Mred[_sage_const_0 ][_sage_const_0 ]))
print(long_to_bytes(flag))



## but the point is e = m + r * h mod q 

## this is the closest vector, with full norm minimized
## but we don't care about j cap in vector, so that will
## also have a effect
## Mred[0] = g, f
## so it should be near to g as that will create the shortest vector

