

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_5 = Integer(5)
v1 = vector(RR, [_sage_const_4 ,_sage_const_1 ,_sage_const_3 ,-_sage_const_1 ])
v2 = vector(RR, [_sage_const_2 ,_sage_const_1 ,-_sage_const_3 ,_sage_const_4 ])
v3 = vector(RR, [_sage_const_1 ,_sage_const_0 ,-_sage_const_2 ,_sage_const_7 ])
v4 = vector(RR, [_sage_const_6 ,_sage_const_2 ,_sage_const_9 ,-_sage_const_5 ])

lest = [v1, v2, v3, v4]
for i in range(len(lest)):
	for j in range(i):
		lest[i] = lest[i] - (lest[i].inner_product(lest[j]))/(lest[j].inner_product(lest[j])) * lest[j]

print(lest[-_sage_const_1 ][_sage_const_1 ].n(digits = _sage_const_5 ))

# 0.91611

print("2nd method")
# 2nd method 

M = matrix(QQ, [v1, v2, v3, v4])
val = M.gram_schmidt()[_sage_const_0 ][_sage_const_3 ][_sage_const_1 ].n(digits = _sage_const_5 )
print(val)


