from Crypto.Util.number import *

# check arnolt's algorithm , if you want to implement solution yourself


# 1st method

# check this - https://link.springer.com/content/pdf/10.1007%2F978-3-540-30580-4_2.pdf
# https://github.com/awslabs/fast-pseudoprimes  - if you need implementation in rust 



# 2nd method

# https://www.semanticscholar.org/paper/Prime-and-Prejudice%3A-Primality-Testing-Under-Albrecht-Massimo/aded01ac120416ed63107ec737903d7a87f09c32
# https://eprint.iacr.org/2018/749.pdf
# https://github.com/loluwot/StrongPseudoPrimeGeneratorMkII

# solution in github repo 


val = 254615674198066111348559108472798769684001878358857095506953165173728617744160791637392778869123081942910652286182625202904553164094373753256627211722903336405144072652128620402472907
# factors 
# [1030617353352977080364307518770663528633732979071959749923, 1028807953088414986212097163368256369521677751668451001002928690467, 240133843331243659724883651873564602171659784123766621731827]





x = 1030617353352977080364307518770663528633732979071959749923
z = pow(x, val-1, val)
if z != 1 :
	print(x, val)

# 1030617353352977080364307518770663528633732979071959749923 254615674198066111348559108472798769684001878358857095506953165173728617744160791637392778869123081942910652286182625202904553164094373753256627211722903336405144072652128620402472907

# {"base":1030617353352977080364307518770663528633732979071959749923,"prime":254615674198066111348559108472798769684001878358857095506953165173728617744160791637392778869123081942910652286182625202904553164094373753256627211722903336405144072652128620402472907}

# {"Response": "[*] Success: You passed all my tests! Here's the first byte of my flag: crypto{Forging_Primes_with_Francois_Arnault}"}
