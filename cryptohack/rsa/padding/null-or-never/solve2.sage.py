

# This file was *autogenerated* from the file solve2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 = Integer(95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103); _sage_const_3 = Integer(3); _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 = Integer(63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828); _sage_const_256 = Integer(256); _sage_const_57 = Integer(57); _sage_const_36 = Integer(36); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_35 = Integer(35); _sage_const_0 = Integer(0)
from Crypto.Util.number import *
from gmpy2 import iroot

n = _sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 
e = _sage_const_3 
c = _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 

inv_256 = inverse(_sage_const_256 ,n)
cipher = (c * pow(inv_256, _sage_const_57  * _sage_const_3 , n) )%n

print("Trying 4th method now")
print("Coppersmith method")

zmodn = Zmod(n)

P = PolynomialRing(zmodn,implementation='NTL', names=('x',)); (x,) = P._first_ngens(1)

f = ( bytes_to_long(b'}') + _sage_const_256  * x + _sage_const_256 **_sage_const_36  * bytes_to_long(b'crypto{') )**e - cipher

ans = f.monic().small_roots(X = _sage_const_2  ** (_sage_const_8  * _sage_const_35 ) ) 

if len(ans) != _sage_const_0 :
	print(b"crypto{" + long_to_bytes(int(ans[_sage_const_0 ])) + b"}")




## b'crypto{n0n_574nd4rd_p4d_c0n51d3r3d_h4rmful}'

