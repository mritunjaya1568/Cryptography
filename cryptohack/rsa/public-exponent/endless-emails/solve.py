from gmpy2 import iroot
from Crypto.Util.number import *
from sympy.ntheory.modular import crt
from itertools import combinations

lest_n = []
lest_ct = []
with open("output.txt",'r') as f:
	for i in range(7):
		n = int(f.readline().split(" ")[-1])
		e = int(f.readline().split(" ")[-1])
		ct = int(f.readline().split(" ")[-1])
		f.readline()
		f.readline()
		lest_n.append(n)
		lest_ct.append(ct)


f.close()
	

print(f"lest_n = {lest_n}")
print(f"lest_ct ={lest_ct}")


''' sage: for i in range(len(lest_n)-1):
....:     for j in range(i+1,len(lest_n)):
....:         print(gcd(lest_n[i],lest_n[i+1]))
 '''

''' all output came out to be 1 so all n are coprime to each other''' 

# msg_pow_3 = 234136172991136742483477194459903805530696823352641557581638100533828438817764476548059778239946821105149533928269783183417675203917594461989733298241569307490200674216402057401601607844412016578647910229532099625634119487899883457800343088938413382532018067511609761851898539532099449453354805168360237648752689321560994666021309837918770435261550963875143882806951133067697416246794222737022418759726056113317897019562149779361856397388293715583631089162563408098433667564688162031666952193972616924938403697541550000938413796018452016150314769659304175028033685864737393588582351796477227883098770977963658014965020208125586535662678012861815900957445197202704044327597319662269412861981186226776383637948466635898176686000354514023612906621098804486842023566259897890388972004589997594540374478255331242085176805688265449400498691093704232189586152894609656725900181109763771068510026493641720467940969140345429661976063129124315700839405503968670598982273029080159298054167161252807044087872220578874275556216116599642032807133969741151854721793961944470458650177418123217893196079655091102411903640518697363235980475190241629617063482929673372562733144369686785440194896404599950762489853648385233113921288421938530841608531092692977362832630784563849170671375211810685796737386730860680362325456838099570567044905283399602448915260761742675757273556906722232962008408236579824100077131503191768437814633938511891935799204263913375305300020003420869472163148586909477397263704060990753229741969930221482251292536647681007057676974941592258174888480520606817530173341111470924688365577706364496043088857772220983791221383279131501478362261231258748553006425036929579284990864504663767753315487246030791702595520486969957785324627880222999477773407672108061790721606227934499854899417007274083509706842272415689848655570714655992116689428453920759305560704900661720090498939439269572394090785571677494046156579076591933720032098072949131168644186658061931593706441777916571312723815191065189424266546746654717029159104112387605449109690554418989154229148863067532503573825459464432257183830034815695265307806537407595660855260600657620541505521849923186908138700309699630881368143523872455525868643168565850174802269972566634114671931871219966071993509401772983530699810045686652809664052508335959114776272074138272030376450999491987236678599270413450659665797503367561844629913082929767483398513697480789518798632988393644597987721571782538115872365429152498906174745353221201876493017124078312787307020488890013373260457393802363046058347238327265562261824627469160037457539680230536092519808574252962643915623369252595839240106287647954820520593520074111782772877092448893239415076557411432407693678388827955180846582056686984843296289353971337900843959740419968208451444875465326833868132045087641784466395514100232628218200592625467104455519705764894293993651793642622200930772494046204307625652486264762856335353282869753999486219083640039445985651419291356162364262176237402718605112357181213264190829223712767696780897401359053165881568612609889421327368867564216584390345680938759829500287221506199810338875558568915255758449848233481135218927357993125628817237808341038095129555723485982589356758207163621793122974832681003923053304909574825874994933146131186812660931112880336470974904837660321904397280337129098739098323836715892273095010723984724369370112725969580028323346583736621860190718299422593643214448070211081102065643586454082893461466923560020963001636967300567550545930203047932086105001967510838554756185769070592606401598740246574726217288666806359507911681574913091327160943230747239759161095867374936441329663442963521550332086136784359727651525377327746656869427128332885831161530334309997898421051935752234089244877933286353795628163305475121778055046102474617943698865400237568683335647072921417165392010072522343491975549029567285195501437899000709014809606863966614393174914972461986719979936554977487328415674401647386547461443471787372418151991747506945240801570330537310116777892549333220176368264747329162503861459869796075450275679029350902638695401757843383790074956126283733464790491124210965121626692653081612346355565422212294459147602017197187762794845231510739522023590924977270538494113709853052607424048592070840867057409944342912067260438486016687632561585279310

# N = 1
# for i in lest_n:
# 	N *= i

# if msg_pow_3 < N:
# 	print("yes")
# else :
# 	print("No")

# msg_pow_3 = msg_pow_3 % N

# flag = iroot(msg_pow_3,3)
# print(flag[1])
# print(long_to_bytes(flag[0]))



for grps in combinations(zip(lest_n,lest_ct),3):
	list_n = []
	list_ct = []
	for grp in grps:
		list_n.append(grp[0])
		list_ct.append(grp[1])
	m = iroot(crt(list_n,list_ct)[0],3)
	if m[1]:
		print(long_to_bytes(m[0]))



''' b'yes\n\n---\n\nJohan Hastad\nProfessor in Computer Science in the Theoretical Computer Science\n
Group at the School of Computer Science and Communication at KTH Royal Institute of Technology in Stockholm, Sweden.\n\n
crypto{1f_y0u_d0nt_p4d_y0u_4r3_Vuln3rabl3}'''
 

'''flag = crypto{1f_y0u_d0nt_p4d_y0u_4r3_Vuln3rabl3}'''


